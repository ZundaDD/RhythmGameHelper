// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RhythmGameHelper.Shared;

#nullable disable

namespace RhythmGameHelper.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250920094109_RenameName")]
    partial class RenameName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Combo")
                        .HasColumnType("integer");

                    b.Property<string>("Composer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<float>("DifficultyLevel")
                        .HasColumnType("real");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SongInclusionGameId")
                        .HasColumnType("integer");

                    b.Property<int>("SongInclusionSongId")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SongInclusionSongId", "SongInclusionGameId");

                    b.ToTable("Chart");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameData");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.GameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId", "Name")
                        .IsUnique();

                    b.ToTable("GameCategories");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.GameVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartTime")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("GameId", "Name")
                        .IsUnique();

                    b.ToTable("GameVersions");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("Artists")
                        .HasColumnType("text[]");

                    b.Property<float?>("MaxOfficialBPM")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialArtist")
                        .HasColumnType("text");

                    b.Property<float>("OfficialBPM")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SongData");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.SongInclusion", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Original")
                        .HasColumnType("boolean");

                    b.Property<int?>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("SongId", "GameId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GameId");

                    b.HasIndex("VersionId");

                    b.ToTable("SongInclusions");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.Chart", b =>
                {
                    b.HasOne("RhythmGameHelper.Shared.DataStructure.SongInclusion", "SongInclusion")
                        .WithMany("Charts")
                        .HasForeignKey("SongInclusionSongId", "SongInclusionGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SongInclusion");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.GameCategory", b =>
                {
                    b.HasOne("RhythmGameHelper.Shared.DataStructure.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.GameVersion", b =>
                {
                    b.HasOne("RhythmGameHelper.Shared.DataStructure.Game", "Game")
                        .WithMany("Versions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.SongInclusion", b =>
                {
                    b.HasOne("RhythmGameHelper.Shared.DataStructure.GameCategory", "Category")
                        .WithMany("Inclusions")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RhythmGameHelper.Shared.DataStructure.Game", "Game")
                        .WithMany("Inclusions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmGameHelper.Shared.DataStructure.Song", "Song")
                        .WithMany("Inclusions")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmGameHelper.Shared.DataStructure.GameVersion", "Version")
                        .WithMany("Inclusions")
                        .HasForeignKey("VersionId");

                    b.Navigation("Category");

                    b.Navigation("Game");

                    b.Navigation("Song");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.Game", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Inclusions");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.GameCategory", b =>
                {
                    b.Navigation("Inclusions");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.GameVersion", b =>
                {
                    b.Navigation("Inclusions");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.Song", b =>
                {
                    b.Navigation("Inclusions");
                });

            modelBuilder.Entity("RhythmGameHelper.Shared.DataStructure.SongInclusion", b =>
                {
                    b.Navigation("Charts");
                });
#pragma warning restore 612, 618
        }
    }
}
